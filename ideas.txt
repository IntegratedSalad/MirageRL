1. There'll be passages downstairs with monsters and some water. Essentialy, first floors fill have very small amounts of water. Deeper floors will be extremely dangerous for new players.
2. Arrows that tell which way to go
3. Mirages, that'll be showing if the internal temperature of the player will rise and brain will get heated.
4. Spitting on sand to make shelter. Or clever use of lamas. -> Forming sandstone without dying from their spit.
5. Player must remember the dungeon floors he cleaned, because it gets very cold when the night comes.
6. Because I won't be implementing z-levels, when player forms an rectangle from sandstone, print something along the lines of "your structure magically forms walls and roof." And player says: ["What...", "Am I on some kind of Fool Us?", "Magic!"]
7. Sandstone underground will be slightly darker.
8. Maybe instead of glyphs with arrows as tiles, they are known only upon looking on them, when player is standing on them.
9. Random world events e.g Sandstorms
10. Add respawn of enemies after some time.
11. Very rare chance of river on map?
12. Sand people.

Story:
You were trying to record some documentary about wildlife on a dessert. You got lost, and you lost the crewmen. <- They will be found with their equipment.
You flew into the dessert by helicopter, noticing very strange, purple rot-like grounds surrounding the whole dessert.

Inspiration:
Imagining how it would be, to be alone in the dessert.

Philosophy:
While being a survival game, I want it to have stupid, goofy things. e.g lamas spitting. Player spitting.

Objectives for player:
	Find exit navigating through dessert by finding marks written on floor.
	Try surviving in harsh environment, with food and drink to worry about.


Goals of development:

	{1} - footnote nr 1
	... - development stage unknown


	0.1 - Of World with many a(nts)s(nake)s.
	1. Walking, killing.

	2{1}. Generating whole map, with glyphs directing the player. Offloading map, saving and loading. v
	2.2 Generated map. V 
	2.3 Map walkable - updating the player position V
	2.4 Glyphs hinting the exit V
	2.5 Offloading entities, everything that needs to be offloaded. V
	2.6 Entities close to the edge can follow player to the chunk he just entered. V
	2.7 Crude end game - reaching end and V dying V. - At the end will be two buttons - go to menu or quit. 
	2.8 Saving and restoring. Saving closes the game. 
	2.9 Message System. Killing enemies.

	About offloading:
		If monsters are about to follow player entering new chunk, and they are in a certain range, instead of offloading them, 
		render them outside window, in exactly the same position as before. Show them only, when they enter the newly generated chunk. 
		Also, if there are walls, keep them in place, so that monsters do need to manoeuvre around them, and these obstacles don't magically disappear.

	About monsters:
		Initially, some monsters do not see the player, and have 1/4 chance to see him.
			Each step gives them more chance to see him.

	6/8

	0.2. Of Surviving and Materialism - UI, Thirst, Hunger, Inventory, Items, Equipment.

	0.3. Of Invention and Speed - Crafting & Energy based combat. Fleeing AI.

	0.3.5 Of Day & Night

	0.4. Of The Depths Below Underworld

	0.5 ...


	... Special chunks with unique enemies and items.

	... Add support for background tiles. V

	... Add runic magic.

	... Add data loaded from JSON files.


{1} Key mechanic, has to be done first, and after initial basic working state it can be improved.
	If we do not get the basics of this done, then it will be harder to implement with more other systems.
	And it will be more harder to balance.


Map:

Size: 

	let's try 50x50


Data type: 
	
	list of tuples. (id=int, [Entities], player=Bool) - another way to manage player? 

	Or - create type Chunk, that will hold that data (id and offloaded entities.)

	id = 0 - starting point
	id = 1 - way out
	id = 2 - has_hint

	Hmm, what is a goal? Dessert has point where it ends.
	Maybe - there is only one good end. There is only one escape to reality. <- V
	So, an end is a portion of circumference.
	The good way out - a civilization with non-sand people.

	Furthermore, where will be the "end"? Is it end, like an end on a path, or just a specific place with civilization.

Systems:

	Calculation of type of enemies based on two points: start and end.
	Calculation of direction of hints. Left when end is on left etc. Also spacing, so that player is not guided, but has vague hints and must survive.
	Also, moving from chunk to chunk costs a little more hunger and thirst.


Goals Of Map:

	1 - basic data done
	2 - walking and updating player position. Getting the position done
	3 - Offloading entities. Loading the entities. done
	4 - walking to the end done
	5 - Direction hints done



Endgame:

It will be a village! You actually have to go and talk to someone, in order to get rescued.
In terms of how it will be implemented - 2-3 tiles on the edge of the map are "village". You get there, you are safe.
There will be a huge amount of monsters or obstacles (mines etc.) at the gates.
SO! an .END property on the map, suggests that there is a gate.


Map Rework: DONE
Walking and updating player position done.
1. Direction hints Done
2. Offloading entities. Loading entities done
3. Entities following through chunks done
4. End game chunk. done


BUGS:
SAND ISN'T BEING RANDOMLY GENERATED!!! <- View is having the same old game map.
